/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package convertor.encoders.relayConsensus;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Status extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4335194746871842750L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Status\",\"namespace\":\"convertor.encoders.relayConsensus\",\"fields\":[{\"name\":\"r\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"R\",\"fields\":[{\"name\":\"nickname\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"metrics-lib/NetworkStatusEntry: String getNickname()\"},{\"name\":\"identity\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"metrics-lib/NetworkStatusEntry: String getFingerprint()\"},{\"name\":\"digest\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"metrics-lib/NetworkStatusEntry: String getDescriptor();\"},{\"name\":\"publication\",\"type\":[\"null\",\"long\"],\"doc\":\"metrics-lib/NetworkStatusEntry: long getPublishedMillis()\"},{\"name\":\"ip\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"metrics-lib/NetworkStatusEntry: String getAddress()\"},{\"name\":\"or_port\",\"type\":[\"null\",\"int\"],\"doc\":\"metrics-lib/NetworkStatusEntry: int getOrPort()\"},{\"name\":\"dir_port\",\"type\":[\"null\",\"int\"],\"doc\":\"metrics-lib/NetworkStatusEntry: int getDirPort()\"}]}]},{\"name\":\"a\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OrAddress\",\"fields\":[{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"implementation specific, see actual converter\"},{\"name\":\"port\",\"type\":[\"null\",\"int\"],\"doc\":\"implementation specific, see actual converter\"}]}}]},{\"name\":\"s\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\"metrics-lib/NetworkStatusEntry: SortedSet<String> getFlags()\"},{\"name\":\"v\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"metrics-lib/NetworkStatusEntry: String getVersion()\"},{\"name\":\"w\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"W\",\"fields\":[{\"name\":\"bandwidth\",\"type\":[\"null\",\"long\"],\"doc\":\"metrics-lib/NetworkStatusEntry: long getBandwidth()\"},{\"name\":\"measured\",\"type\":[\"null\",\"long\"],\"doc\":\"metrics-lib/NetworkStatusEntry: long getMeasured()\"},{\"name\":\"unmeasured\",\"type\":[\"null\",\"boolean\"],\"doc\":\"metrics-lib/NetworkStatusEntry: boolean getUnmeasured()\"}]}]},{\"name\":\"p\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Policy\",\"fields\":[{\"name\":\"default_policy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"metrics-lib/NetworkStatusEntry: String getDefaultPolicy()\"},{\"name\":\"port_summary\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"metrics-lib/NetworkStatusEntry: String getPortList()\"}]}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public convertor.encoders.relayConsensus.R r;
  @Deprecated public java.util.List<convertor.encoders.relayConsensus.OrAddress> a;
  /** metrics-lib/NetworkStatusEntry: SortedSet<String> getFlags() */
  @Deprecated public java.util.List<java.lang.String> s;
  /** metrics-lib/NetworkStatusEntry: String getVersion() */
  @Deprecated public java.lang.String v;
  @Deprecated public convertor.encoders.relayConsensus.W w;
  @Deprecated public convertor.encoders.relayConsensus.Policy p;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Status() {}

  /**
   * All-args constructor.
   * @param s metrics-lib/NetworkStatusEntry: SortedSet<String> getFlags()
   * @param v metrics-lib/NetworkStatusEntry: String getVersion()
   */
  public Status(convertor.encoders.relayConsensus.R r, java.util.List<convertor.encoders.relayConsensus.OrAddress> a, java.util.List<java.lang.String> s, java.lang.String v, convertor.encoders.relayConsensus.W w, convertor.encoders.relayConsensus.Policy p) {
    this.r = r;
    this.a = a;
    this.s = s;
    this.v = v;
    this.w = w;
    this.p = p;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return r;
    case 1: return a;
    case 2: return s;
    case 3: return v;
    case 4: return w;
    case 5: return p;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: r = (convertor.encoders.relayConsensus.R)value$; break;
    case 1: a = (java.util.List<convertor.encoders.relayConsensus.OrAddress>)value$; break;
    case 2: s = (java.util.List<java.lang.String>)value$; break;
    case 3: v = (java.lang.String)value$; break;
    case 4: w = (convertor.encoders.relayConsensus.W)value$; break;
    case 5: p = (convertor.encoders.relayConsensus.Policy)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'r' field.
   */
  public convertor.encoders.relayConsensus.R getR() {
    return r;
  }

  /**
   * Sets the value of the 'r' field.
   * @param value the value to set.
   */
  public void setR(convertor.encoders.relayConsensus.R value) {
    this.r = value;
  }

  /**
   * Gets the value of the 'a' field.
   */
  public java.util.List<convertor.encoders.relayConsensus.OrAddress> getA() {
    return a;
  }

  /**
   * Sets the value of the 'a' field.
   * @param value the value to set.
   */
  public void setA(java.util.List<convertor.encoders.relayConsensus.OrAddress> value) {
    this.a = value;
  }

  /**
   * Gets the value of the 's' field.
   * @return metrics-lib/NetworkStatusEntry: SortedSet<String> getFlags()
   */
  public java.util.List<java.lang.String> getS() {
    return s;
  }

  /**
   * Sets the value of the 's' field.
   * metrics-lib/NetworkStatusEntry: SortedSet<String> getFlags()
   * @param value the value to set.
   */
  public void setS(java.util.List<java.lang.String> value) {
    this.s = value;
  }

  /**
   * Gets the value of the 'v' field.
   * @return metrics-lib/NetworkStatusEntry: String getVersion()
   */
  public java.lang.String getV() {
    return v;
  }

  /**
   * Sets the value of the 'v' field.
   * metrics-lib/NetworkStatusEntry: String getVersion()
   * @param value the value to set.
   */
  public void setV(java.lang.String value) {
    this.v = value;
  }

  /**
   * Gets the value of the 'w' field.
   */
  public convertor.encoders.relayConsensus.W getW() {
    return w;
  }

  /**
   * Sets the value of the 'w' field.
   * @param value the value to set.
   */
  public void setW(convertor.encoders.relayConsensus.W value) {
    this.w = value;
  }

  /**
   * Gets the value of the 'p' field.
   */
  public convertor.encoders.relayConsensus.Policy getP() {
    return p;
  }

  /**
   * Sets the value of the 'p' field.
   * @param value the value to set.
   */
  public void setP(convertor.encoders.relayConsensus.Policy value) {
    this.p = value;
  }

  /**
   * Creates a new Status RecordBuilder.
   * @return A new Status RecordBuilder
   */
  public static convertor.encoders.relayConsensus.Status.Builder newBuilder() {
    return new convertor.encoders.relayConsensus.Status.Builder();
  }
  
  /**
   * Creates a new Status RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Status RecordBuilder
   */
  public static convertor.encoders.relayConsensus.Status.Builder newBuilder(convertor.encoders.relayConsensus.Status.Builder other) {
    return new convertor.encoders.relayConsensus.Status.Builder(other);
  }
  
  /**
   * Creates a new Status RecordBuilder by copying an existing Status instance.
   * @param other The existing instance to copy.
   * @return A new Status RecordBuilder
   */
  public static convertor.encoders.relayConsensus.Status.Builder newBuilder(convertor.encoders.relayConsensus.Status other) {
    return new convertor.encoders.relayConsensus.Status.Builder(other);
  }
  
  /**
   * RecordBuilder for Status instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Status>
    implements org.apache.avro.data.RecordBuilder<Status> {

    private convertor.encoders.relayConsensus.R r;
    private convertor.encoders.relayConsensus.R.Builder rBuilder;
    private java.util.List<convertor.encoders.relayConsensus.OrAddress> a;
    /** metrics-lib/NetworkStatusEntry: SortedSet<String> getFlags() */
    private java.util.List<java.lang.String> s;
    /** metrics-lib/NetworkStatusEntry: String getVersion() */
    private java.lang.String v;
    private convertor.encoders.relayConsensus.W w;
    private convertor.encoders.relayConsensus.W.Builder wBuilder;
    private convertor.encoders.relayConsensus.Policy p;
    private convertor.encoders.relayConsensus.Policy.Builder pBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(convertor.encoders.relayConsensus.Status.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(convertor.encoders.relayConsensus.Status.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.r)) {
        this.r = data().deepCopy(fields()[0].schema(), other.r);
        fieldSetFlags()[0] = true;
      }
      if (other.hasRBuilder()) {
        this.rBuilder = convertor.encoders.relayConsensus.R.newBuilder(other.getRBuilder());
      }
      if (isValidValue(fields()[1], other.a)) {
        this.a = data().deepCopy(fields()[1].schema(), other.a);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.s)) {
        this.s = data().deepCopy(fields()[2].schema(), other.s);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.v)) {
        this.v = data().deepCopy(fields()[3].schema(), other.v);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.w)) {
        this.w = data().deepCopy(fields()[4].schema(), other.w);
        fieldSetFlags()[4] = true;
      }
      if (other.hasWBuilder()) {
        this.wBuilder = convertor.encoders.relayConsensus.W.newBuilder(other.getWBuilder());
      }
      if (isValidValue(fields()[5], other.p)) {
        this.p = data().deepCopy(fields()[5].schema(), other.p);
        fieldSetFlags()[5] = true;
      }
      if (other.hasPBuilder()) {
        this.pBuilder = convertor.encoders.relayConsensus.Policy.newBuilder(other.getPBuilder());
      }
    }
    
    /**
     * Creates a Builder by copying an existing Status instance
     * @param other The existing instance to copy.
     */
    private Builder(convertor.encoders.relayConsensus.Status other) {
            super(convertor.encoders.relayConsensus.Status.SCHEMA$);
      if (isValidValue(fields()[0], other.r)) {
        this.r = data().deepCopy(fields()[0].schema(), other.r);
        fieldSetFlags()[0] = true;
      }
      this.rBuilder = null;
      if (isValidValue(fields()[1], other.a)) {
        this.a = data().deepCopy(fields()[1].schema(), other.a);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.s)) {
        this.s = data().deepCopy(fields()[2].schema(), other.s);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.v)) {
        this.v = data().deepCopy(fields()[3].schema(), other.v);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.w)) {
        this.w = data().deepCopy(fields()[4].schema(), other.w);
        fieldSetFlags()[4] = true;
      }
      this.wBuilder = null;
      if (isValidValue(fields()[5], other.p)) {
        this.p = data().deepCopy(fields()[5].schema(), other.p);
        fieldSetFlags()[5] = true;
      }
      this.pBuilder = null;
    }

    /**
      * Gets the value of the 'r' field.
      * @return The value.
      */
    public convertor.encoders.relayConsensus.R getR() {
      return r;
    }

    /**
      * Sets the value of the 'r' field.
      * @param value The value of 'r'.
      * @return This builder.
      */
    public convertor.encoders.relayConsensus.Status.Builder setR(convertor.encoders.relayConsensus.R value) {
      validate(fields()[0], value);
      this.rBuilder = null;
      this.r = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'r' field has been set.
      * @return True if the 'r' field has been set, false otherwise.
      */
    public boolean hasR() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'r' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public convertor.encoders.relayConsensus.R.Builder getRBuilder() {
      if (rBuilder == null) {
        if (hasR()) {
          setRBuilder(convertor.encoders.relayConsensus.R.newBuilder(r));
        } else {
          setRBuilder(convertor.encoders.relayConsensus.R.newBuilder());
        }
      }
      return rBuilder;
    }

    /**
     * Sets the Builder instance for the 'r' field
     * @return This builder.
     */
    public convertor.encoders.relayConsensus.Status.Builder setRBuilder(convertor.encoders.relayConsensus.R.Builder value) {
      clearR();
      rBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'r' field has an active Builder instance
     * @return True if the 'r' field has an active Builder instance
     */
    public boolean hasRBuilder() {
      return rBuilder != null;
    }

    /**
      * Clears the value of the 'r' field.
      * @return This builder.
      */
    public convertor.encoders.relayConsensus.Status.Builder clearR() {
      r = null;
      rBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'a' field.
      * @return The value.
      */
    public java.util.List<convertor.encoders.relayConsensus.OrAddress> getA() {
      return a;
    }

    /**
      * Sets the value of the 'a' field.
      * @param value The value of 'a'.
      * @return This builder.
      */
    public convertor.encoders.relayConsensus.Status.Builder setA(java.util.List<convertor.encoders.relayConsensus.OrAddress> value) {
      validate(fields()[1], value);
      this.a = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'a' field has been set.
      * @return True if the 'a' field has been set, false otherwise.
      */
    public boolean hasA() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'a' field.
      * @return This builder.
      */
    public convertor.encoders.relayConsensus.Status.Builder clearA() {
      a = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 's' field.
      * metrics-lib/NetworkStatusEntry: SortedSet<String> getFlags()
      * @return The value.
      */
    public java.util.List<java.lang.String> getS() {
      return s;
    }

    /**
      * Sets the value of the 's' field.
      * metrics-lib/NetworkStatusEntry: SortedSet<String> getFlags()
      * @param value The value of 's'.
      * @return This builder.
      */
    public convertor.encoders.relayConsensus.Status.Builder setS(java.util.List<java.lang.String> value) {
      validate(fields()[2], value);
      this.s = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 's' field has been set.
      * metrics-lib/NetworkStatusEntry: SortedSet<String> getFlags()
      * @return True if the 's' field has been set, false otherwise.
      */
    public boolean hasS() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 's' field.
      * metrics-lib/NetworkStatusEntry: SortedSet<String> getFlags()
      * @return This builder.
      */
    public convertor.encoders.relayConsensus.Status.Builder clearS() {
      s = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'v' field.
      * metrics-lib/NetworkStatusEntry: String getVersion()
      * @return The value.
      */
    public java.lang.String getV() {
      return v;
    }

    /**
      * Sets the value of the 'v' field.
      * metrics-lib/NetworkStatusEntry: String getVersion()
      * @param value The value of 'v'.
      * @return This builder.
      */
    public convertor.encoders.relayConsensus.Status.Builder setV(java.lang.String value) {
      validate(fields()[3], value);
      this.v = value;
      fieldSetFlags()[3] = true;
      return this; 
    }

    /**
      * Checks whether the 'v' field has been set.
      * metrics-lib/NetworkStatusEntry: String getVersion()
      * @return True if the 'v' field has been set, false otherwise.
      */
    public boolean hasV() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'v' field.
      * metrics-lib/NetworkStatusEntry: String getVersion()
      * @return This builder.
      */
    public convertor.encoders.relayConsensus.Status.Builder clearV() {
      v = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'w' field.
      * @return The value.
      */
    public convertor.encoders.relayConsensus.W getW() {
      return w;
    }

    /**
      * Sets the value of the 'w' field.
      * @param value The value of 'w'.
      * @return This builder.
      */
    public convertor.encoders.relayConsensus.Status.Builder setW(convertor.encoders.relayConsensus.W value) {
      validate(fields()[4], value);
      this.wBuilder = null;
      this.w = value;
      fieldSetFlags()[4] = true;
      return this; 
    }

    /**
      * Checks whether the 'w' field has been set.
      * @return True if the 'w' field has been set, false otherwise.
      */
    public boolean hasW() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'w' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public convertor.encoders.relayConsensus.W.Builder getWBuilder() {
      if (wBuilder == null) {
        if (hasW()) {
          setWBuilder(convertor.encoders.relayConsensus.W.newBuilder(w));
        } else {
          setWBuilder(convertor.encoders.relayConsensus.W.newBuilder());
        }
      }
      return wBuilder;
    }

    /**
     * Sets the Builder instance for the 'w' field
     * @return This builder.
     */
    public convertor.encoders.relayConsensus.Status.Builder setWBuilder(convertor.encoders.relayConsensus.W.Builder value) {
      clearW();
      wBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'w' field has an active Builder instance
     * @return True if the 'w' field has an active Builder instance
     */
    public boolean hasWBuilder() {
      return wBuilder != null;
    }

    /**
      * Clears the value of the 'w' field.
      * @return This builder.
      */
    public convertor.encoders.relayConsensus.Status.Builder clearW() {
      w = null;
      wBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'p' field.
      * @return The value.
      */
    public convertor.encoders.relayConsensus.Policy getP() {
      return p;
    }

    /**
      * Sets the value of the 'p' field.
      * @param value The value of 'p'.
      * @return This builder.
      */
    public convertor.encoders.relayConsensus.Status.Builder setP(convertor.encoders.relayConsensus.Policy value) {
      validate(fields()[5], value);
      this.pBuilder = null;
      this.p = value;
      fieldSetFlags()[5] = true;
      return this; 
    }

    /**
      * Checks whether the 'p' field has been set.
      * @return True if the 'p' field has been set, false otherwise.
      */
    public boolean hasP() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'p' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public convertor.encoders.relayConsensus.Policy.Builder getPBuilder() {
      if (pBuilder == null) {
        if (hasP()) {
          setPBuilder(convertor.encoders.relayConsensus.Policy.newBuilder(p));
        } else {
          setPBuilder(convertor.encoders.relayConsensus.Policy.newBuilder());
        }
      }
      return pBuilder;
    }

    /**
     * Sets the Builder instance for the 'p' field
     * @return This builder.
     */
    public convertor.encoders.relayConsensus.Status.Builder setPBuilder(convertor.encoders.relayConsensus.Policy.Builder value) {
      clearP();
      pBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'p' field has an active Builder instance
     * @return True if the 'p' field has an active Builder instance
     */
    public boolean hasPBuilder() {
      return pBuilder != null;
    }

    /**
      * Clears the value of the 'p' field.
      * @return This builder.
      */
    public convertor.encoders.relayConsensus.Status.Builder clearP() {
      p = null;
      pBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public Status build() {
      try {
        Status record = new Status();
        if (rBuilder != null) {
          record.r = this.rBuilder.build();
        } else {
          record.r = fieldSetFlags()[0] ? this.r : (convertor.encoders.relayConsensus.R) defaultValue(fields()[0]);
        }
        record.a = fieldSetFlags()[1] ? this.a : (java.util.List<convertor.encoders.relayConsensus.OrAddress>) defaultValue(fields()[1]);
        record.s = fieldSetFlags()[2] ? this.s : (java.util.List<java.lang.String>) defaultValue(fields()[2]);
        record.v = fieldSetFlags()[3] ? this.v : (java.lang.String) defaultValue(fields()[3]);
        if (wBuilder != null) {
          record.w = this.wBuilder.build();
        } else {
          record.w = fieldSetFlags()[4] ? this.w : (convertor.encoders.relayConsensus.W) defaultValue(fields()[4]);
        }
        if (pBuilder != null) {
          record.p = this.pBuilder.build();
        } else {
          record.p = fieldSetFlags()[5] ? this.p : (convertor.encoders.relayConsensus.Policy) defaultValue(fields()[5]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
