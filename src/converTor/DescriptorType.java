package converTor;

import org.apache.avro.Schema;
import org.apache.avro.data.Json;

import java.io.File;
import java.io.IOException;


/*
 * descriptor types and their attributes
 */

class DescriptorType {

  String name;          // identifying name of the DescriptorType

  String clasName;      // Name of the class (like name, but First Letter Capitalized)
  String clasFullName;  // name of the class + '.class' extension
  String clasFullPath;  // name of the class + '.class' extension
  File clasPath;        // path to Avro classes (autogenerated from Avro IDL schema)

  Class<?> schemaClas;  // schema Class object
  //  Class<? extends SpecificRecordBase> schemaClas;  todo - would 'extends' be useful?
  File avscFile;        // Avro JSON schema (derived from Avro IDL schema)
  Schema avsc;          // parsed JSON schema
 // Schema jsonavsc;      // parsed JSON schema TODO kann das weg oder ist das code?


  DescriptorType(String name) {

    this.name = name;

    this.clasName = name.substring(0, 1).toUpperCase() + name.substring(1);
    this.clasFullName = clasName + ".class";
    this.clasFullPath = "converTor/" + name + "/" + clasFullName;
    this.clasPath = new File("converTor/" + name + "/" + clasFullName);

    try {
      //  TODO try the initialized version again
      //  load and initialize class
      //  this.schemaClas = Class.forName("converTor." + name + "." + clasName);
      //  load but don't initialize
      this.schemaClas = ClassLoader.getSystemClassLoader().loadClass("converTor." + name + "." + clasName);
    } catch (ClassNotFoundException c) {
      System.err.println("ClassNotFoundException: " + c.getMessage());
      c.printStackTrace();
    }
    // trying one way of schema parsing
    this.avscFile = new File("src/converTor/schema/" + clasName + ".avsc");
    try {
      Schema.Parser parser = new Schema.Parser();
      this.avsc = parser.parse(avscFile) ;
    } catch (IOException e) {
      System.err.println("IOException: " + e.getMessage());
      e.printStackTrace();
    }

    //  trying a different way of schema parsing for json
    //  TODO kann das weg oder ist das code?
//    try {
//      // this.jsonavsc = Schema.parse(Json.class.getResourceAsStream("/converTor/schema/" + clasName + ".avsc"));
//      Schema.Parser parser = new Schema.Parser();
//      this.jsonavsc = parser.parse(Json.class.getResourceAsStream("/converTor/schema/" + clasName + ".avsc"));
//    } catch (IOException e) {
//      System.err.println("IOException: " + e.getMessage());
//      e.printStackTrace();
//    }



  }

  static DescriptorType relayType          = new DescriptorType("relay");
  static DescriptorType bridgeType         = new DescriptorType("bridge");
  static DescriptorType relayExtraType     = new DescriptorType("relayExtra");
  static DescriptorType bridgeExtraType    = new DescriptorType("bridgeExtra");
  static DescriptorType relayVoteType      = new DescriptorType("relayVote");
  static DescriptorType relayConsensusType = new DescriptorType("relayConsensus");
  static DescriptorType bridgeStatusType   = new DescriptorType("bridgeStatus");
  static DescriptorType tordnselType       = new DescriptorType("tordnsel");
  static DescriptorType torperfType        = new DescriptorType("torperf");


}