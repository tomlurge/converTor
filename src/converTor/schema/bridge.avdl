@namespace("converTor.bridge")
protocol bridge_server_descriptor {

  record Router {
    /** metrics-lib/ServerDescriptor: String getNickname() */
    union { null, string } nickname;
    /** metrics-lib/ServerDescriptor: String getAddress() */
    union { null, string } address;
    /** metrics-lib/ServerDescriptor: int getOrPort() */
    union { null, int } or_port;
    /** metrics-lib/ServerDescriptor: int getSocksPort() */
    union { null, int } socks_port;
    /** metrics-lib/ServerDescriptor: int getDirPort() */
    union { null, int } dir_port;
  }

  record Bandwidth {
    /** metrics-lib/ServerDescriptor: int getBandwidthRate() */
    union { null, int } avg;
    /** metrics-lib/ServerDescriptor: int getBandwidthBurst() */
    union { null, int } burst;
    /** metrics-lib/ServerDescriptor: int getBandwidthObserved() */
    union { null, int } observed;
  }

  record OrAddress {
    /** implementation specific */
    string address;
    /** implementation specific */
    int port;
  }

  record ReadHistory {
    /** metrics-lib/BandwidthHistory: long getHistoryEndMillis() */
    string date;
    /** metrics-lib/BandwidthHistory: long getIntervalLength() */
    long interval;
    /** metrics-lib/BandwidthHistory: Collection<Long> getBandwidthValues().values() */
    array<long> `bytes`;
  }

  record WriteHistory {
    /** metrics-lib/BandwidthHistory: long getHistoryEndMillis() */
    string date;
    /** metrics-lib/BandwidthHistory: long getIntervalLength() */
    long interval;
    /** metrics-lib/BandwidthHistory: Collection<Long> getBandwidthValues().values() */
    array<long> `bytes`;
  }

  record NtorCrossCert {
    /** metrics-lib/ServerDescriptor: String getNtorOnionKeyCrosscert() */
    string cert;
    /** metrics-lib/ServerDescriptor: int getNtorOnionKeyCrosscertSign() */
    int bit;
  }


  /** server-descriptor 1.0 - same as relay but without field 'router_signature' */
  @aliases(["bridge_server"])
  record Bridge {
    string descriptor_type = "server-descriptor 1.0";
    /** metrics-lib/ServerDescriptor: String getServerDescriptorDigest() */
    union { null, string } server_descriptor_digest;
    /** metrics-lib/ServerDescriptor: String getServerDescriptorDigestSha256() */
    union { null, string } server_descriptor_sha256;
    // see above
    union { null, Router } router;
    /** metrics-lib/ServerDescriptor: String getIdentityEd25519() */
    union { null, boolean } identity_ed25519;
    /** metrics-lib/ServerDescriptor: String getMasterKeyEd25519() */
    union { null, string } master_key_ed25519;
    // see above
    union { null, Bandwidth } bandwidth;
    /** metrics-lib/ServerDescriptor: String getPlatform() */
    union { null, string } platform;
    /** metrics-lib/ServerDescriptor: long getPublishedMillis() */
    union { null, string } published;
    /** metrics-lib/ServerDescriptor: String getFingerprint() */
    union { null, string } fingerprint;
    /** metrics-lib/ServerDescriptor: boolean isHibernating() */
    union { null, boolean } hibernating;
    /** metrics-lib/ServerDescriptor: Long getUptime() */
    union { null, long } uptime;
    /** metrics-lib/ServerDescriptor: String getOnionKey() */
    union { null, boolean } onion_key;
    /** metrics-lib/ServerDescriptor: String getOnionKeyCrosscert() */
    union { null, boolean } onion_key_crosscert;
    /** metrics-lib/ServerDescriptor: String getNtorOnionKey() */
    union { null, boolean } ntor_onion_key;
    // see above
    union { null, NtorCrossCert } ntor_onion_key_crosscert;
    /** metrics-lib/ServerDescriptor: String getSigningKey() */
    union { null, boolean } signing_key;
    /** metrics-lib/ServerDescriptor: List<String> getExitPolicyLines() */
    union { null, array<string> } exit_policy;
    /** metrics-lib/ServerDescriptor: String getIpv6DefaultPolicy() */
    union { null, array<string> } ipv6_policy;
    /** metrics-lib/ServerDescriptor: String getIpv6PortList() */
    union { null, string } ipv6_portlist;
    /** metrics-lib/ServerDescriptor: String getRouterSignatureEd25519() */
    union { null, boolean } router_sig_ed25519;
    /** metrics-lib/ServerDescriptor: String getContact() */
    union { null, string } contact;
    /** metrics-lib/ServerDescriptor: List<String> getFamilyEntries() */
    union { null, array<string> } family;
    /** metrics-lib/ServerDescriptor: BandwidthHistory getReadHistory() */
    union { null, ReadHistory } read_history;
    /** metrics-lib/ServerDescriptor: BandwidthHistory getWriteHistory() */
    union { null, WriteHistory } write_history;
    /** metrics-lib/ServerDescriptor: boolean getUsesEnhancedDnsLogic() */
    union { null, boolean } eventdns;
    /** metrics-lib/ServerDescriptor: boolean getCachesExtraInfo() */
    union { null, boolean } caches_extra_info;
    /** metrics-lib/ServerDescriptor: String getExtraInfoDigest() */
    union { null, string } extra_info_digest;
    /** metrics-lib/ServerDescriptor: String getExtraInfoDigestSha256() */
    union { null, string } extra_info_digest_sha256;
    /** metrics-lib/ServerDescriptor: List<Integer> getHiddenServiceDirVersions() */
    union { null, array<int> } hidden_service_dir;
    /** metrics-lib/ServerDescriptor: List<Integer> getLinkProtocolVersions() */
    union { null, array<int> } link_protocol_versions;
    /** metrics-lib/ServerDescriptor: List<Integer> getCircuitProtocolVersions() */
    union { null, array<int> } circuit_protocol_versions;
    /** metrics-lib/ServerDescriptor: boolean getAllowSingleHopExits() */
    union { null, boolean } allow_single_hop_exits;
    /** metrics-lib/ServerDescriptor: List<String> getOrAddresses() */
    union { null, array<OrAddress> } or_address;
  }

}