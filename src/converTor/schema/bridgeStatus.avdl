@namespace("converTor.bridgeStatus")
protocol bridge_network_status_descriptor {

  record FlagTresholds {
    /** metrics-lib/BridgeNetworkStatus: long getStableUptime() */
    union { null, long } stable_uptime;
    /** metrics-lib/BridgeNetworkStatus: long getStableMtbf() */
    union { null, long } stable_mtbf;
    /** metrics-lib/BridgeNetworkStatus: int getEnoughMtbfInfo() */
    union { null, int } enough_mtbf;
    /** metrics-lib/BridgeNetworkStatus: long getFastBandwidth() */
    union { null, long } fast_speed;
    /** metrics-lib/BridgeNetworkStatus: double getGuardWfu() */
    union { null, double } guard_wfu;
    /** metrics-lib/BridgeNetworkStatus: long getGuardTk() */
    union { null, long } guard_tk;
    /** metrics-lib/BridgeNetworkStatus: long getGuardBandwidthIncludingExits() */
    union { null, long } guard_bw_inc_exits;
    /** metrics-lib/BridgeNetworkStatus: long getGuardBandwidthExcludingExits() */
    union { null, long } guard_bw_exc_exits;
    /** metrics-lib/BridgeNetworkStatus: int getIgnoringAdvertisedBws() */
    union { null, int } ignoring_advertised;
  }

  record R {
    /** metrics-lib/NetworkStatusEntry: String getNickname() */
    union { null, string } nickname;
    /** metrics-lib/NetworkStatusEntry: String getFingerprint() */
    union { null, string } identity;
    /** metrics-lib/NetworkStatusEntry: String getDescriptor() */
    union { null, string } digest;
    /** metrics-lib/NetworkStatusEntry: long getPublishedMillis() */
    union { null, long } published;
    /** metrics-lib/NetworkStatusEntry: String getAddress() */
    union { null, string } ip;
    /** metrics-lib/NetworkStatusEntry: int getOrPort() */
    union { null, int } or_port;
    /** metrics-lib/NetworkStatusEntry: int getDirPort() */
    union { null, int } dir_port;
  }

  record OrAddress {
    /** metrics-lib/NetworkStatusEntry: getOrAddresses() */
    /** implementation specific, see actual converter */
    string address;
    /** implementation specific, see actual converter */
    int port;
  }

  record W {
    /** metrics-lib/NetworkStatusEntry: long getBandwidth() */
    union { null, long } bandwidth;
    /** metrics-lib/NetworkStatusEntry: long getMeasured() */
    union { null, long } measured;
    /** metrics-lib/NetworkStatusEntry: boolean getUnmeasured() */
    union { null, boolean } unmeasured;
  }

  record Policy {
    /** metrics-lib/NetworkStatusEntry: String getDefaultPolicy() */
    union { null, string } default_policy;
    /** metrics-lib/NetworkStatusEntry: String getPortList() */
    union { null, string } port_summary;
  }

  record Status {
    // see above
    R r;
    // see above
    union { null, array<OrAddress> } a;
    /** metrics-lib/NetworkStatusEntry: SortedSet<String> getFlags() */
    union { null, array<string> } s;
    /** metrics-lib/NetworkStatusEntry: String getVersion() */
    union { null, string } v;
    // see above
    union { null, W } w;
    // see above
    union { null, Policy } p;
  }


  @aliases(["bridge_network_status"])
  record BridgeStatus {
    string descriptor_type = "bridge-network-status 1.0";
    /** metrics-lib/BridgeNetworkStatus: long getPublishedMillis() */
    union { null, long } published;
    /** see above */
    union { null, FlagTresholds } flag_tresholds;
    /** metrics-lib/BridgeNetworkStatus: SortedMap<String, NetworkStatusEntry> getStatusEntries()
     status entries, one for each contained bridge */
    union { null, array<Status> } status;
  }

}
