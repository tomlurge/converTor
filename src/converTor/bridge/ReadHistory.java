/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package converTor.bridge;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ReadHistory extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ReadHistory\",\"namespace\":\"converTor.bridge\",\"fields\":[{\"name\":\"date\",\"type\":\"string\"},{\"name\":\"interval\",\"type\":\"long\"},{\"name\":\"bytes\",\"type\":{\"type\":\"array\",\"items\":\"long\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence date;
  @Deprecated public long interval;
  @Deprecated public java.util.List<java.lang.Long> bytes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ReadHistory() {}

  /**
   * All-args constructor.
   */
  public ReadHistory(java.lang.CharSequence date, java.lang.Long interval, java.util.List<java.lang.Long> bytes) {
    this.date = date;
    this.interval = interval;
    this.bytes = bytes;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return date;
    case 1: return interval;
    case 2: return bytes;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: date = (java.lang.CharSequence)value$; break;
    case 1: interval = (java.lang.Long)value$; break;
    case 2: bytes = (java.util.List<java.lang.Long>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'date' field.
   */
  public java.lang.CharSequence getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.CharSequence value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'interval' field.
   */
  public java.lang.Long getInterval() {
    return interval;
  }

  /**
   * Sets the value of the 'interval' field.
   * @param value the value to set.
   */
  public void setInterval(java.lang.Long value) {
    this.interval = value;
  }

  /**
   * Gets the value of the 'bytes' field.
   */
  public java.util.List<java.lang.Long> getBytes() {
    return bytes;
  }

  /**
   * Sets the value of the 'bytes' field.
   * @param value the value to set.
   */
  public void setBytes(java.util.List<java.lang.Long> value) {
    this.bytes = value;
  }

  /** Creates a new ReadHistory RecordBuilder */
  public static converTor.bridge.ReadHistory.Builder newBuilder() {
    return new converTor.bridge.ReadHistory.Builder();
  }
  
  /** Creates a new ReadHistory RecordBuilder by copying an existing Builder */
  public static converTor.bridge.ReadHistory.Builder newBuilder(converTor.bridge.ReadHistory.Builder other) {
    return new converTor.bridge.ReadHistory.Builder(other);
  }
  
  /** Creates a new ReadHistory RecordBuilder by copying an existing ReadHistory instance */
  public static converTor.bridge.ReadHistory.Builder newBuilder(converTor.bridge.ReadHistory other) {
    return new converTor.bridge.ReadHistory.Builder(other);
  }
  
  /**
   * RecordBuilder for ReadHistory instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ReadHistory>
    implements org.apache.avro.data.RecordBuilder<ReadHistory> {

    private java.lang.CharSequence date;
    private long interval;
    private java.util.List<java.lang.Long> bytes;

    /** Creates a new Builder */
    private Builder() {
      super(converTor.bridge.ReadHistory.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(converTor.bridge.ReadHistory.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.date)) {
        this.date = data().deepCopy(fields()[0].schema(), other.date);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.interval)) {
        this.interval = data().deepCopy(fields()[1].schema(), other.interval);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bytes)) {
        this.bytes = data().deepCopy(fields()[2].schema(), other.bytes);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ReadHistory instance */
    private Builder(converTor.bridge.ReadHistory other) {
            super(converTor.bridge.ReadHistory.SCHEMA$);
      if (isValidValue(fields()[0], other.date)) {
        this.date = data().deepCopy(fields()[0].schema(), other.date);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.interval)) {
        this.interval = data().deepCopy(fields()[1].schema(), other.interval);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bytes)) {
        this.bytes = data().deepCopy(fields()[2].schema(), other.bytes);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'date' field */
    public java.lang.CharSequence getDate() {
      return date;
    }
    
    /** Sets the value of the 'date' field */
    public converTor.bridge.ReadHistory.Builder setDate(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.date = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'date' field has been set */
    public boolean hasDate() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'date' field */
    public converTor.bridge.ReadHistory.Builder clearDate() {
      date = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'interval' field */
    public java.lang.Long getInterval() {
      return interval;
    }
    
    /** Sets the value of the 'interval' field */
    public converTor.bridge.ReadHistory.Builder setInterval(long value) {
      validate(fields()[1], value);
      this.interval = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'interval' field has been set */
    public boolean hasInterval() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'interval' field */
    public converTor.bridge.ReadHistory.Builder clearInterval() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'bytes' field */
    public java.util.List<java.lang.Long> getBytes() {
      return bytes;
    }
    
    /** Sets the value of the 'bytes' field */
    public converTor.bridge.ReadHistory.Builder setBytes(java.util.List<java.lang.Long> value) {
      validate(fields()[2], value);
      this.bytes = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'bytes' field has been set */
    public boolean hasBytes() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'bytes' field */
    public converTor.bridge.ReadHistory.Builder clearBytes() {
      bytes = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public ReadHistory build() {
      try {
        ReadHistory record = new ReadHistory();
        record.date = fieldSetFlags()[0] ? this.date : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.interval = fieldSetFlags()[1] ? this.interval : (java.lang.Long) defaultValue(fields()[1]);
        record.bytes = fieldSetFlags()[2] ? this.bytes : (java.util.List<java.lang.Long>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
