/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package converTor.relayVote;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Policy extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7940179652710976255L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Policy\",\"namespace\":\"converTor.relayVote\",\"fields\":[{\"name\":\"default_policy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"metrics-lib/NetworkStatusEntry: String getDefaultPolicy()\"},{\"name\":\"port_summary\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"metrics-lib/NetworkStatusEntry: String getPortList()\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** metrics-lib/NetworkStatusEntry: String getDefaultPolicy() */
  @Deprecated public java.lang.String default_policy;
  /** metrics-lib/NetworkStatusEntry: String getPortList() */
  @Deprecated public java.lang.String port_summary;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Policy() {}

  /**
   * All-args constructor.
   * @param default_policy metrics-lib/NetworkStatusEntry: String getDefaultPolicy()
   * @param port_summary metrics-lib/NetworkStatusEntry: String getPortList()
   */
  public Policy(java.lang.String default_policy, java.lang.String port_summary) {
    this.default_policy = default_policy;
    this.port_summary = port_summary;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return default_policy;
    case 1: return port_summary;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: default_policy = (java.lang.String)value$; break;
    case 1: port_summary = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'default_policy' field.
   * @return metrics-lib/NetworkStatusEntry: String getDefaultPolicy()
   */
  public java.lang.String getDefaultPolicy() {
    return default_policy;
  }

  /**
   * Sets the value of the 'default_policy' field.
   * metrics-lib/NetworkStatusEntry: String getDefaultPolicy()
   * @param value the value to set.
   */
  public void setDefaultPolicy(java.lang.String value) {
    this.default_policy = value;
  }

  /**
   * Gets the value of the 'port_summary' field.
   * @return metrics-lib/NetworkStatusEntry: String getPortList()
   */
  public java.lang.String getPortSummary() {
    return port_summary;
  }

  /**
   * Sets the value of the 'port_summary' field.
   * metrics-lib/NetworkStatusEntry: String getPortList()
   * @param value the value to set.
   */
  public void setPortSummary(java.lang.String value) {
    this.port_summary = value;
  }

  /**
   * Creates a new Policy RecordBuilder.
   * @return A new Policy RecordBuilder
   */
  public static converTor.relayVote.Policy.Builder newBuilder() {
    return new converTor.relayVote.Policy.Builder();
  }
  
  /**
   * Creates a new Policy RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Policy RecordBuilder
   */
  public static converTor.relayVote.Policy.Builder newBuilder(converTor.relayVote.Policy.Builder other) {
    return new converTor.relayVote.Policy.Builder(other);
  }
  
  /**
   * Creates a new Policy RecordBuilder by copying an existing Policy instance.
   * @param other The existing instance to copy.
   * @return A new Policy RecordBuilder
   */
  public static converTor.relayVote.Policy.Builder newBuilder(converTor.relayVote.Policy other) {
    return new converTor.relayVote.Policy.Builder(other);
  }
  
  /**
   * RecordBuilder for Policy instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Policy>
    implements org.apache.avro.data.RecordBuilder<Policy> {

    /** metrics-lib/NetworkStatusEntry: String getDefaultPolicy() */
    private java.lang.String default_policy;
    /** metrics-lib/NetworkStatusEntry: String getPortList() */
    private java.lang.String port_summary;

    /** Creates a new Builder */
    private Builder() {
      super(converTor.relayVote.Policy.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(converTor.relayVote.Policy.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.default_policy)) {
        this.default_policy = data().deepCopy(fields()[0].schema(), other.default_policy);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.port_summary)) {
        this.port_summary = data().deepCopy(fields()[1].schema(), other.port_summary);
        fieldSetFlags()[1] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing Policy instance
     * @param other The existing instance to copy.
     */
    private Builder(converTor.relayVote.Policy other) {
            super(converTor.relayVote.Policy.SCHEMA$);
      if (isValidValue(fields()[0], other.default_policy)) {
        this.default_policy = data().deepCopy(fields()[0].schema(), other.default_policy);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.port_summary)) {
        this.port_summary = data().deepCopy(fields()[1].schema(), other.port_summary);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'default_policy' field.
      * metrics-lib/NetworkStatusEntry: String getDefaultPolicy()
      * @return The value.
      */
    public java.lang.String getDefaultPolicy() {
      return default_policy;
    }

    /**
      * Sets the value of the 'default_policy' field.
      * metrics-lib/NetworkStatusEntry: String getDefaultPolicy()
      * @param value The value of 'default_policy'.
      * @return This builder.
      */
    public converTor.relayVote.Policy.Builder setDefaultPolicy(java.lang.String value) {
      validate(fields()[0], value);
      this.default_policy = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'default_policy' field has been set.
      * metrics-lib/NetworkStatusEntry: String getDefaultPolicy()
      * @return True if the 'default_policy' field has been set, false otherwise.
      */
    public boolean hasDefaultPolicy() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'default_policy' field.
      * metrics-lib/NetworkStatusEntry: String getDefaultPolicy()
      * @return This builder.
      */
    public converTor.relayVote.Policy.Builder clearDefaultPolicy() {
      default_policy = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'port_summary' field.
      * metrics-lib/NetworkStatusEntry: String getPortList()
      * @return The value.
      */
    public java.lang.String getPortSummary() {
      return port_summary;
    }

    /**
      * Sets the value of the 'port_summary' field.
      * metrics-lib/NetworkStatusEntry: String getPortList()
      * @param value The value of 'port_summary'.
      * @return This builder.
      */
    public converTor.relayVote.Policy.Builder setPortSummary(java.lang.String value) {
      validate(fields()[1], value);
      this.port_summary = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'port_summary' field has been set.
      * metrics-lib/NetworkStatusEntry: String getPortList()
      * @return True if the 'port_summary' field has been set, false otherwise.
      */
    public boolean hasPortSummary() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'port_summary' field.
      * metrics-lib/NetworkStatusEntry: String getPortList()
      * @return This builder.
      */
    public converTor.relayVote.Policy.Builder clearPortSummary() {
      port_summary = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Policy build() {
      try {
        Policy record = new Policy();
        record.default_policy = fieldSetFlags()[0] ? this.default_policy : (java.lang.String) defaultValue(fields()[0]);
        record.port_summary = fieldSetFlags()[1] ? this.port_summary : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
