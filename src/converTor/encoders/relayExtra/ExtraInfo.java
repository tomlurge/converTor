/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package converTor.encoders.relayExtra;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ExtraInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -30923868134923975L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ExtraInfo\",\"namespace\":\"converTor.encoders.relayExtra\",\"fields\":[{\"name\":\"nickname\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"metrics-lib/ExtraInfoDescriptor: String getNickname()\"},{\"name\":\"fingerprint\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"metrics-lib/ExtraInfoDescriptor: String getFingerprint()\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** metrics-lib/ExtraInfoDescriptor: String getNickname() */
  @Deprecated public java.lang.String nickname;
  /** metrics-lib/ExtraInfoDescriptor: String getFingerprint() */
  @Deprecated public java.lang.String fingerprint;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ExtraInfo() {}

  /**
   * All-args constructor.
   * @param nickname metrics-lib/ExtraInfoDescriptor: String getNickname()
   * @param fingerprint metrics-lib/ExtraInfoDescriptor: String getFingerprint()
   */
  public ExtraInfo(java.lang.String nickname, java.lang.String fingerprint) {
    this.nickname = nickname;
    this.fingerprint = fingerprint;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return nickname;
    case 1: return fingerprint;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: nickname = (java.lang.String)value$; break;
    case 1: fingerprint = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'nickname' field.
   * @return metrics-lib/ExtraInfoDescriptor: String getNickname()
   */
  public java.lang.String getNickname() {
    return nickname;
  }

  /**
   * Sets the value of the 'nickname' field.
   * metrics-lib/ExtraInfoDescriptor: String getNickname()
   * @param value the value to set.
   */
  public void setNickname(java.lang.String value) {
    this.nickname = value;
  }

  /**
   * Gets the value of the 'fingerprint' field.
   * @return metrics-lib/ExtraInfoDescriptor: String getFingerprint()
   */
  public java.lang.String getFingerprint() {
    return fingerprint;
  }

  /**
   * Sets the value of the 'fingerprint' field.
   * metrics-lib/ExtraInfoDescriptor: String getFingerprint()
   * @param value the value to set.
   */
  public void setFingerprint(java.lang.String value) {
    this.fingerprint = value;
  }

  /**
   * Creates a new ExtraInfo RecordBuilder.
   * @return A new ExtraInfo RecordBuilder
   */
  public static converTor.encoders.relayExtra.ExtraInfo.Builder newBuilder() {
    return new converTor.encoders.relayExtra.ExtraInfo.Builder();
  }
  
  /**
   * Creates a new ExtraInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ExtraInfo RecordBuilder
   */
  public static converTor.encoders.relayExtra.ExtraInfo.Builder newBuilder(converTor.encoders.relayExtra.ExtraInfo.Builder other) {
    return new converTor.encoders.relayExtra.ExtraInfo.Builder(other);
  }
  
  /**
   * Creates a new ExtraInfo RecordBuilder by copying an existing ExtraInfo instance.
   * @param other The existing instance to copy.
   * @return A new ExtraInfo RecordBuilder
   */
  public static converTor.encoders.relayExtra.ExtraInfo.Builder newBuilder(converTor.encoders.relayExtra.ExtraInfo other) {
    return new converTor.encoders.relayExtra.ExtraInfo.Builder(other);
  }
  
  /**
   * RecordBuilder for ExtraInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ExtraInfo>
    implements org.apache.avro.data.RecordBuilder<ExtraInfo> {

    /** metrics-lib/ExtraInfoDescriptor: String getNickname() */
    private java.lang.String nickname;
    /** metrics-lib/ExtraInfoDescriptor: String getFingerprint() */
    private java.lang.String fingerprint;

    /** Creates a new Builder */
    private Builder() {
      super(converTor.encoders.relayExtra.ExtraInfo.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(converTor.encoders.relayExtra.ExtraInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.nickname)) {
        this.nickname = data().deepCopy(fields()[0].schema(), other.nickname);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fingerprint)) {
        this.fingerprint = data().deepCopy(fields()[1].schema(), other.fingerprint);
        fieldSetFlags()[1] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing ExtraInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(converTor.encoders.relayExtra.ExtraInfo other) {
            super(converTor.encoders.relayExtra.ExtraInfo.SCHEMA$);
      if (isValidValue(fields()[0], other.nickname)) {
        this.nickname = data().deepCopy(fields()[0].schema(), other.nickname);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fingerprint)) {
        this.fingerprint = data().deepCopy(fields()[1].schema(), other.fingerprint);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'nickname' field.
      * metrics-lib/ExtraInfoDescriptor: String getNickname()
      * @return The value.
      */
    public java.lang.String getNickname() {
      return nickname;
    }

    /**
      * Sets the value of the 'nickname' field.
      * metrics-lib/ExtraInfoDescriptor: String getNickname()
      * @param value The value of 'nickname'.
      * @return This builder.
      */
    public converTor.encoders.relayExtra.ExtraInfo.Builder setNickname(java.lang.String value) {
      validate(fields()[0], value);
      this.nickname = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'nickname' field has been set.
      * metrics-lib/ExtraInfoDescriptor: String getNickname()
      * @return True if the 'nickname' field has been set, false otherwise.
      */
    public boolean hasNickname() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'nickname' field.
      * metrics-lib/ExtraInfoDescriptor: String getNickname()
      * @return This builder.
      */
    public converTor.encoders.relayExtra.ExtraInfo.Builder clearNickname() {
      nickname = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fingerprint' field.
      * metrics-lib/ExtraInfoDescriptor: String getFingerprint()
      * @return The value.
      */
    public java.lang.String getFingerprint() {
      return fingerprint;
    }

    /**
      * Sets the value of the 'fingerprint' field.
      * metrics-lib/ExtraInfoDescriptor: String getFingerprint()
      * @param value The value of 'fingerprint'.
      * @return This builder.
      */
    public converTor.encoders.relayExtra.ExtraInfo.Builder setFingerprint(java.lang.String value) {
      validate(fields()[1], value);
      this.fingerprint = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'fingerprint' field has been set.
      * metrics-lib/ExtraInfoDescriptor: String getFingerprint()
      * @return True if the 'fingerprint' field has been set, false otherwise.
      */
    public boolean hasFingerprint() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fingerprint' field.
      * metrics-lib/ExtraInfoDescriptor: String getFingerprint()
      * @return This builder.
      */
    public converTor.encoders.relayExtra.ExtraInfo.Builder clearFingerprint() {
      fingerprint = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public ExtraInfo build() {
      try {
        ExtraInfo record = new ExtraInfo();
        record.nickname = fieldSetFlags()[0] ? this.nickname : (java.lang.String) defaultValue(fields()[0]);
        record.fingerprint = fieldSetFlags()[1] ? this.fingerprint : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
