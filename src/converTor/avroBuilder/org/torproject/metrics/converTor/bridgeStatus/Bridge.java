/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.torproject.metrics.converTor.bridgeStatus;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Bridge extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Bridge\",\"namespace\":\"org.torproject.metrics.converTor.bridgeStatus\",\"fields\":[{\"name\":\"r\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"R\",\"fields\":[{\"name\":\"nickname\",\"type\":[\"null\",\"string\"]},{\"name\":\"identity\",\"type\":[\"null\",\"string\"]},{\"name\":\"digest\",\"type\":[\"null\",\"string\"]},{\"name\":\"published\",\"type\":[\"null\",\"string\"]},{\"name\":\"ip\",\"type\":[\"null\",\"string\"]},{\"name\":\"or_port\",\"type\":[\"null\",\"int\"]},{\"name\":\"dir_port\",\"type\":[\"null\",\"int\"]}]}]},{\"name\":\"s\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}]},{\"name\":\"w\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"W\",\"fields\":[{\"name\":\"bandwidth\",\"type\":[\"null\",\"long\"]},{\"name\":\"measured\",\"type\":[\"null\",\"long\"]},{\"name\":\"unmeasured\",\"type\":[\"null\",\"boolean\"]}]}]},{\"name\":\"p\",\"type\":[\"null\",\"string\"]},{\"name\":\"a\",\"type\":[\"null\",\"string\"]},{\"name\":\"v\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public org.torproject.metrics.converTor.bridgeStatus.R r;
  @Deprecated public java.util.List<java.lang.CharSequence> s;
  @Deprecated public org.torproject.metrics.converTor.bridgeStatus.W w;
  @Deprecated public java.lang.CharSequence p;
  @Deprecated public java.lang.CharSequence a;
  @Deprecated public java.lang.CharSequence v;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Bridge() {}

  /**
   * All-args constructor.
   */
  public Bridge(org.torproject.metrics.converTor.bridgeStatus.R r, java.util.List<java.lang.CharSequence> s, org.torproject.metrics.converTor.bridgeStatus.W w, java.lang.CharSequence p, java.lang.CharSequence a, java.lang.CharSequence v) {
    this.r = r;
    this.s = s;
    this.w = w;
    this.p = p;
    this.a = a;
    this.v = v;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return r;
    case 1: return s;
    case 2: return w;
    case 3: return p;
    case 4: return a;
    case 5: return v;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: r = (org.torproject.metrics.converTor.bridgeStatus.R)value$; break;
    case 1: s = (java.util.List<java.lang.CharSequence>)value$; break;
    case 2: w = (org.torproject.metrics.converTor.bridgeStatus.W)value$; break;
    case 3: p = (java.lang.CharSequence)value$; break;
    case 4: a = (java.lang.CharSequence)value$; break;
    case 5: v = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'r' field.
   */
  public org.torproject.metrics.converTor.bridgeStatus.R getR() {
    return r;
  }

  /**
   * Sets the value of the 'r' field.
   * @param value the value to set.
   */
  public void setR(org.torproject.metrics.converTor.bridgeStatus.R value) {
    this.r = value;
  }

  /**
   * Gets the value of the 's' field.
   */
  public java.util.List<java.lang.CharSequence> getS() {
    return s;
  }

  /**
   * Sets the value of the 's' field.
   * @param value the value to set.
   */
  public void setS(java.util.List<java.lang.CharSequence> value) {
    this.s = value;
  }

  /**
   * Gets the value of the 'w' field.
   */
  public org.torproject.metrics.converTor.bridgeStatus.W getW() {
    return w;
  }

  /**
   * Sets the value of the 'w' field.
   * @param value the value to set.
   */
  public void setW(org.torproject.metrics.converTor.bridgeStatus.W value) {
    this.w = value;
  }

  /**
   * Gets the value of the 'p' field.
   */
  public java.lang.CharSequence getP() {
    return p;
  }

  /**
   * Sets the value of the 'p' field.
   * @param value the value to set.
   */
  public void setP(java.lang.CharSequence value) {
    this.p = value;
  }

  /**
   * Gets the value of the 'a' field.
   */
  public java.lang.CharSequence getA() {
    return a;
  }

  /**
   * Sets the value of the 'a' field.
   * @param value the value to set.
   */
  public void setA(java.lang.CharSequence value) {
    this.a = value;
  }

  /**
   * Gets the value of the 'v' field.
   */
  public java.lang.CharSequence getV() {
    return v;
  }

  /**
   * Sets the value of the 'v' field.
   * @param value the value to set.
   */
  public void setV(java.lang.CharSequence value) {
    this.v = value;
  }

  /** Creates a new Bridge RecordBuilder */
  public static org.torproject.metrics.converTor.bridgeStatus.Bridge.Builder newBuilder() {
    return new org.torproject.metrics.converTor.bridgeStatus.Bridge.Builder();
  }
  
  /** Creates a new Bridge RecordBuilder by copying an existing Builder */
  public static org.torproject.metrics.converTor.bridgeStatus.Bridge.Builder newBuilder(org.torproject.metrics.converTor.bridgeStatus.Bridge.Builder other) {
    return new org.torproject.metrics.converTor.bridgeStatus.Bridge.Builder(other);
  }
  
  /** Creates a new Bridge RecordBuilder by copying an existing Bridge instance */
  public static org.torproject.metrics.converTor.bridgeStatus.Bridge.Builder newBuilder(org.torproject.metrics.converTor.bridgeStatus.Bridge other) {
    return new org.torproject.metrics.converTor.bridgeStatus.Bridge.Builder(other);
  }
  
  /**
   * RecordBuilder for Bridge instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Bridge>
    implements org.apache.avro.data.RecordBuilder<Bridge> {

    private org.torproject.metrics.converTor.bridgeStatus.R r;
    private java.util.List<java.lang.CharSequence> s;
    private org.torproject.metrics.converTor.bridgeStatus.W w;
    private java.lang.CharSequence p;
    private java.lang.CharSequence a;
    private java.lang.CharSequence v;

    /** Creates a new Builder */
    private Builder() {
      super(org.torproject.metrics.converTor.bridgeStatus.Bridge.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.torproject.metrics.converTor.bridgeStatus.Bridge.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.r)) {
        this.r = data().deepCopy(fields()[0].schema(), other.r);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.s)) {
        this.s = data().deepCopy(fields()[1].schema(), other.s);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.w)) {
        this.w = data().deepCopy(fields()[2].schema(), other.w);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.p)) {
        this.p = data().deepCopy(fields()[3].schema(), other.p);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.a)) {
        this.a = data().deepCopy(fields()[4].schema(), other.a);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.v)) {
        this.v = data().deepCopy(fields()[5].schema(), other.v);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Bridge instance */
    private Builder(org.torproject.metrics.converTor.bridgeStatus.Bridge other) {
            super(org.torproject.metrics.converTor.bridgeStatus.Bridge.SCHEMA$);
      if (isValidValue(fields()[0], other.r)) {
        this.r = data().deepCopy(fields()[0].schema(), other.r);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.s)) {
        this.s = data().deepCopy(fields()[1].schema(), other.s);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.w)) {
        this.w = data().deepCopy(fields()[2].schema(), other.w);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.p)) {
        this.p = data().deepCopy(fields()[3].schema(), other.p);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.a)) {
        this.a = data().deepCopy(fields()[4].schema(), other.a);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.v)) {
        this.v = data().deepCopy(fields()[5].schema(), other.v);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'r' field */
    public org.torproject.metrics.converTor.bridgeStatus.R getR() {
      return r;
    }
    
    /** Sets the value of the 'r' field */
    public org.torproject.metrics.converTor.bridgeStatus.Bridge.Builder setR(org.torproject.metrics.converTor.bridgeStatus.R value) {
      validate(fields()[0], value);
      this.r = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'r' field has been set */
    public boolean hasR() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'r' field */
    public org.torproject.metrics.converTor.bridgeStatus.Bridge.Builder clearR() {
      r = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 's' field */
    public java.util.List<java.lang.CharSequence> getS() {
      return s;
    }
    
    /** Sets the value of the 's' field */
    public org.torproject.metrics.converTor.bridgeStatus.Bridge.Builder setS(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[1], value);
      this.s = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 's' field has been set */
    public boolean hasS() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 's' field */
    public org.torproject.metrics.converTor.bridgeStatus.Bridge.Builder clearS() {
      s = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'w' field */
    public org.torproject.metrics.converTor.bridgeStatus.W getW() {
      return w;
    }
    
    /** Sets the value of the 'w' field */
    public org.torproject.metrics.converTor.bridgeStatus.Bridge.Builder setW(org.torproject.metrics.converTor.bridgeStatus.W value) {
      validate(fields()[2], value);
      this.w = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'w' field has been set */
    public boolean hasW() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'w' field */
    public org.torproject.metrics.converTor.bridgeStatus.Bridge.Builder clearW() {
      w = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'p' field */
    public java.lang.CharSequence getP() {
      return p;
    }
    
    /** Sets the value of the 'p' field */
    public org.torproject.metrics.converTor.bridgeStatus.Bridge.Builder setP(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.p = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'p' field has been set */
    public boolean hasP() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'p' field */
    public org.torproject.metrics.converTor.bridgeStatus.Bridge.Builder clearP() {
      p = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'a' field */
    public java.lang.CharSequence getA() {
      return a;
    }
    
    /** Sets the value of the 'a' field */
    public org.torproject.metrics.converTor.bridgeStatus.Bridge.Builder setA(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.a = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'a' field has been set */
    public boolean hasA() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'a' field */
    public org.torproject.metrics.converTor.bridgeStatus.Bridge.Builder clearA() {
      a = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'v' field */
    public java.lang.CharSequence getV() {
      return v;
    }
    
    /** Sets the value of the 'v' field */
    public org.torproject.metrics.converTor.bridgeStatus.Bridge.Builder setV(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.v = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'v' field has been set */
    public boolean hasV() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'v' field */
    public org.torproject.metrics.converTor.bridgeStatus.Bridge.Builder clearV() {
      v = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public Bridge build() {
      try {
        Bridge record = new Bridge();
        record.r = fieldSetFlags()[0] ? this.r : (org.torproject.metrics.converTor.bridgeStatus.R) defaultValue(fields()[0]);
        record.s = fieldSetFlags()[1] ? this.s : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[1]);
        record.w = fieldSetFlags()[2] ? this.w : (org.torproject.metrics.converTor.bridgeStatus.W) defaultValue(fields()[2]);
        record.p = fieldSetFlags()[3] ? this.p : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.a = fieldSetFlags()[4] ? this.a : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.v = fieldSetFlags()[5] ? this.v : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
