/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.torproject.metrics.converTor.bridgeStatus;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class R extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"R\",\"namespace\":\"org.torproject.metrics.converTor.bridgeStatus\",\"fields\":[{\"name\":\"nickname\",\"type\":[\"null\",\"string\"]},{\"name\":\"identity\",\"type\":[\"null\",\"string\"]},{\"name\":\"digest\",\"type\":[\"null\",\"string\"]},{\"name\":\"published\",\"type\":[\"null\",\"string\"]},{\"name\":\"ip\",\"type\":[\"null\",\"string\"]},{\"name\":\"or_port\",\"type\":[\"null\",\"int\"]},{\"name\":\"dir_port\",\"type\":[\"null\",\"int\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence nickname;
  @Deprecated public java.lang.CharSequence identity;
  @Deprecated public java.lang.CharSequence digest;
  @Deprecated public java.lang.CharSequence published;
  @Deprecated public java.lang.CharSequence ip;
  @Deprecated public java.lang.Integer or_port;
  @Deprecated public java.lang.Integer dir_port;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public R() {}

  /**
   * All-args constructor.
   */
  public R(java.lang.CharSequence nickname, java.lang.CharSequence identity, java.lang.CharSequence digest, java.lang.CharSequence published, java.lang.CharSequence ip, java.lang.Integer or_port, java.lang.Integer dir_port) {
    this.nickname = nickname;
    this.identity = identity;
    this.digest = digest;
    this.published = published;
    this.ip = ip;
    this.or_port = or_port;
    this.dir_port = dir_port;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return nickname;
    case 1: return identity;
    case 2: return digest;
    case 3: return published;
    case 4: return ip;
    case 5: return or_port;
    case 6: return dir_port;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: nickname = (java.lang.CharSequence)value$; break;
    case 1: identity = (java.lang.CharSequence)value$; break;
    case 2: digest = (java.lang.CharSequence)value$; break;
    case 3: published = (java.lang.CharSequence)value$; break;
    case 4: ip = (java.lang.CharSequence)value$; break;
    case 5: or_port = (java.lang.Integer)value$; break;
    case 6: dir_port = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'nickname' field.
   */
  public java.lang.CharSequence getNickname() {
    return nickname;
  }

  /**
   * Sets the value of the 'nickname' field.
   * @param value the value to set.
   */
  public void setNickname(java.lang.CharSequence value) {
    this.nickname = value;
  }

  /**
   * Gets the value of the 'identity' field.
   */
  public java.lang.CharSequence getIdentity() {
    return identity;
  }

  /**
   * Sets the value of the 'identity' field.
   * @param value the value to set.
   */
  public void setIdentity(java.lang.CharSequence value) {
    this.identity = value;
  }

  /**
   * Gets the value of the 'digest' field.
   */
  public java.lang.CharSequence getDigest() {
    return digest;
  }

  /**
   * Sets the value of the 'digest' field.
   * @param value the value to set.
   */
  public void setDigest(java.lang.CharSequence value) {
    this.digest = value;
  }

  /**
   * Gets the value of the 'published' field.
   */
  public java.lang.CharSequence getPublished() {
    return published;
  }

  /**
   * Sets the value of the 'published' field.
   * @param value the value to set.
   */
  public void setPublished(java.lang.CharSequence value) {
    this.published = value;
  }

  /**
   * Gets the value of the 'ip' field.
   */
  public java.lang.CharSequence getIp() {
    return ip;
  }

  /**
   * Sets the value of the 'ip' field.
   * @param value the value to set.
   */
  public void setIp(java.lang.CharSequence value) {
    this.ip = value;
  }

  /**
   * Gets the value of the 'or_port' field.
   */
  public java.lang.Integer getOrPort() {
    return or_port;
  }

  /**
   * Sets the value of the 'or_port' field.
   * @param value the value to set.
   */
  public void setOrPort(java.lang.Integer value) {
    this.or_port = value;
  }

  /**
   * Gets the value of the 'dir_port' field.
   */
  public java.lang.Integer getDirPort() {
    return dir_port;
  }

  /**
   * Sets the value of the 'dir_port' field.
   * @param value the value to set.
   */
  public void setDirPort(java.lang.Integer value) {
    this.dir_port = value;
  }

  /** Creates a new R RecordBuilder */
  public static org.torproject.metrics.converTor.bridgeStatus.R.Builder newBuilder() {
    return new org.torproject.metrics.converTor.bridgeStatus.R.Builder();
  }
  
  /** Creates a new R RecordBuilder by copying an existing Builder */
  public static org.torproject.metrics.converTor.bridgeStatus.R.Builder newBuilder(org.torproject.metrics.converTor.bridgeStatus.R.Builder other) {
    return new org.torproject.metrics.converTor.bridgeStatus.R.Builder(other);
  }
  
  /** Creates a new R RecordBuilder by copying an existing R instance */
  public static org.torproject.metrics.converTor.bridgeStatus.R.Builder newBuilder(org.torproject.metrics.converTor.bridgeStatus.R other) {
    return new org.torproject.metrics.converTor.bridgeStatus.R.Builder(other);
  }
  
  /**
   * RecordBuilder for R instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<R>
    implements org.apache.avro.data.RecordBuilder<R> {

    private java.lang.CharSequence nickname;
    private java.lang.CharSequence identity;
    private java.lang.CharSequence digest;
    private java.lang.CharSequence published;
    private java.lang.CharSequence ip;
    private java.lang.Integer or_port;
    private java.lang.Integer dir_port;

    /** Creates a new Builder */
    private Builder() {
      super(org.torproject.metrics.converTor.bridgeStatus.R.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.torproject.metrics.converTor.bridgeStatus.R.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.nickname)) {
        this.nickname = data().deepCopy(fields()[0].schema(), other.nickname);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.identity)) {
        this.identity = data().deepCopy(fields()[1].schema(), other.identity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.digest)) {
        this.digest = data().deepCopy(fields()[2].schema(), other.digest);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.published)) {
        this.published = data().deepCopy(fields()[3].schema(), other.published);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ip)) {
        this.ip = data().deepCopy(fields()[4].schema(), other.ip);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.or_port)) {
        this.or_port = data().deepCopy(fields()[5].schema(), other.or_port);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.dir_port)) {
        this.dir_port = data().deepCopy(fields()[6].schema(), other.dir_port);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing R instance */
    private Builder(org.torproject.metrics.converTor.bridgeStatus.R other) {
            super(org.torproject.metrics.converTor.bridgeStatus.R.SCHEMA$);
      if (isValidValue(fields()[0], other.nickname)) {
        this.nickname = data().deepCopy(fields()[0].schema(), other.nickname);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.identity)) {
        this.identity = data().deepCopy(fields()[1].schema(), other.identity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.digest)) {
        this.digest = data().deepCopy(fields()[2].schema(), other.digest);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.published)) {
        this.published = data().deepCopy(fields()[3].schema(), other.published);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ip)) {
        this.ip = data().deepCopy(fields()[4].schema(), other.ip);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.or_port)) {
        this.or_port = data().deepCopy(fields()[5].schema(), other.or_port);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.dir_port)) {
        this.dir_port = data().deepCopy(fields()[6].schema(), other.dir_port);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'nickname' field */
    public java.lang.CharSequence getNickname() {
      return nickname;
    }
    
    /** Sets the value of the 'nickname' field */
    public org.torproject.metrics.converTor.bridgeStatus.R.Builder setNickname(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.nickname = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'nickname' field has been set */
    public boolean hasNickname() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'nickname' field */
    public org.torproject.metrics.converTor.bridgeStatus.R.Builder clearNickname() {
      nickname = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'identity' field */
    public java.lang.CharSequence getIdentity() {
      return identity;
    }
    
    /** Sets the value of the 'identity' field */
    public org.torproject.metrics.converTor.bridgeStatus.R.Builder setIdentity(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.identity = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'identity' field has been set */
    public boolean hasIdentity() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'identity' field */
    public org.torproject.metrics.converTor.bridgeStatus.R.Builder clearIdentity() {
      identity = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'digest' field */
    public java.lang.CharSequence getDigest() {
      return digest;
    }
    
    /** Sets the value of the 'digest' field */
    public org.torproject.metrics.converTor.bridgeStatus.R.Builder setDigest(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.digest = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'digest' field has been set */
    public boolean hasDigest() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'digest' field */
    public org.torproject.metrics.converTor.bridgeStatus.R.Builder clearDigest() {
      digest = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'published' field */
    public java.lang.CharSequence getPublished() {
      return published;
    }
    
    /** Sets the value of the 'published' field */
    public org.torproject.metrics.converTor.bridgeStatus.R.Builder setPublished(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.published = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'published' field has been set */
    public boolean hasPublished() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'published' field */
    public org.torproject.metrics.converTor.bridgeStatus.R.Builder clearPublished() {
      published = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'ip' field */
    public java.lang.CharSequence getIp() {
      return ip;
    }
    
    /** Sets the value of the 'ip' field */
    public org.torproject.metrics.converTor.bridgeStatus.R.Builder setIp(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.ip = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'ip' field has been set */
    public boolean hasIp() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'ip' field */
    public org.torproject.metrics.converTor.bridgeStatus.R.Builder clearIp() {
      ip = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'or_port' field */
    public java.lang.Integer getOrPort() {
      return or_port;
    }
    
    /** Sets the value of the 'or_port' field */
    public org.torproject.metrics.converTor.bridgeStatus.R.Builder setOrPort(java.lang.Integer value) {
      validate(fields()[5], value);
      this.or_port = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'or_port' field has been set */
    public boolean hasOrPort() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'or_port' field */
    public org.torproject.metrics.converTor.bridgeStatus.R.Builder clearOrPort() {
      or_port = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'dir_port' field */
    public java.lang.Integer getDirPort() {
      return dir_port;
    }
    
    /** Sets the value of the 'dir_port' field */
    public org.torproject.metrics.converTor.bridgeStatus.R.Builder setDirPort(java.lang.Integer value) {
      validate(fields()[6], value);
      this.dir_port = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'dir_port' field has been set */
    public boolean hasDirPort() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'dir_port' field */
    public org.torproject.metrics.converTor.bridgeStatus.R.Builder clearDirPort() {
      dir_port = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public R build() {
      try {
        R record = new R();
        record.nickname = fieldSetFlags()[0] ? this.nickname : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.identity = fieldSetFlags()[1] ? this.identity : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.digest = fieldSetFlags()[2] ? this.digest : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.published = fieldSetFlags()[3] ? this.published : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.ip = fieldSetFlags()[4] ? this.ip : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.or_port = fieldSetFlags()[5] ? this.or_port : (java.lang.Integer) defaultValue(fields()[5]);
        record.dir_port = fieldSetFlags()[6] ? this.dir_port : (java.lang.Integer) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
