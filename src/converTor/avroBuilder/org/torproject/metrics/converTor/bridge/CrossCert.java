/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.torproject.metrics.converTor.bridge;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CrossCert extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CrossCert\",\"namespace\":\"org.torproject.metrics.converTor.bridge\",\"fields\":[{\"name\":\"cert\",\"type\":\"string\"},{\"name\":\"bit\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence cert;
  @Deprecated public int bit;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public CrossCert() {}

  /**
   * All-args constructor.
   */
  public CrossCert(java.lang.CharSequence cert, java.lang.Integer bit) {
    this.cert = cert;
    this.bit = bit;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return cert;
    case 1: return bit;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: cert = (java.lang.CharSequence)value$; break;
    case 1: bit = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'cert' field.
   */
  public java.lang.CharSequence getCert() {
    return cert;
  }

  /**
   * Sets the value of the 'cert' field.
   * @param value the value to set.
   */
  public void setCert(java.lang.CharSequence value) {
    this.cert = value;
  }

  /**
   * Gets the value of the 'bit' field.
   */
  public java.lang.Integer getBit() {
    return bit;
  }

  /**
   * Sets the value of the 'bit' field.
   * @param value the value to set.
   */
  public void setBit(java.lang.Integer value) {
    this.bit = value;
  }

  /** Creates a new CrossCert RecordBuilder */
  public static org.torproject.metrics.converTor.bridge.CrossCert.Builder newBuilder() {
    return new org.torproject.metrics.converTor.bridge.CrossCert.Builder();
  }
  
  /** Creates a new CrossCert RecordBuilder by copying an existing Builder */
  public static org.torproject.metrics.converTor.bridge.CrossCert.Builder newBuilder(org.torproject.metrics.converTor.bridge.CrossCert.Builder other) {
    return new org.torproject.metrics.converTor.bridge.CrossCert.Builder(other);
  }
  
  /** Creates a new CrossCert RecordBuilder by copying an existing CrossCert instance */
  public static org.torproject.metrics.converTor.bridge.CrossCert.Builder newBuilder(org.torproject.metrics.converTor.bridge.CrossCert other) {
    return new org.torproject.metrics.converTor.bridge.CrossCert.Builder(other);
  }
  
  /**
   * RecordBuilder for CrossCert instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CrossCert>
    implements org.apache.avro.data.RecordBuilder<CrossCert> {

    private java.lang.CharSequence cert;
    private int bit;

    /** Creates a new Builder */
    private Builder() {
      super(org.torproject.metrics.converTor.bridge.CrossCert.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.torproject.metrics.converTor.bridge.CrossCert.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.cert)) {
        this.cert = data().deepCopy(fields()[0].schema(), other.cert);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bit)) {
        this.bit = data().deepCopy(fields()[1].schema(), other.bit);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing CrossCert instance */
    private Builder(org.torproject.metrics.converTor.bridge.CrossCert other) {
            super(org.torproject.metrics.converTor.bridge.CrossCert.SCHEMA$);
      if (isValidValue(fields()[0], other.cert)) {
        this.cert = data().deepCopy(fields()[0].schema(), other.cert);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bit)) {
        this.bit = data().deepCopy(fields()[1].schema(), other.bit);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'cert' field */
    public java.lang.CharSequence getCert() {
      return cert;
    }
    
    /** Sets the value of the 'cert' field */
    public org.torproject.metrics.converTor.bridge.CrossCert.Builder setCert(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.cert = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'cert' field has been set */
    public boolean hasCert() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'cert' field */
    public org.torproject.metrics.converTor.bridge.CrossCert.Builder clearCert() {
      cert = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'bit' field */
    public java.lang.Integer getBit() {
      return bit;
    }
    
    /** Sets the value of the 'bit' field */
    public org.torproject.metrics.converTor.bridge.CrossCert.Builder setBit(int value) {
      validate(fields()[1], value);
      this.bit = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'bit' field has been set */
    public boolean hasBit() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'bit' field */
    public org.torproject.metrics.converTor.bridge.CrossCert.Builder clearBit() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public CrossCert build() {
      try {
        CrossCert record = new CrossCert();
        record.cert = fieldSetFlags()[0] ? this.cert : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.bit = fieldSetFlags()[1] ? this.bit : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
