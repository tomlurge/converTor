@namespace("org.torproject.metrics.converTor")
protocol bridge_server_descriptor {

  record Router {
    union { null, string } nickname;
    union { null, string } address;
    union { null, int } or_port;
    union { null, int } socks_port;
    union { null, int } dir_port;
  }

  record Bandwidth {
    union { null, int } avg;
    union { null, int } burst;
    union { null, int } observed;
  }

  record OrAddress {
    string address;
    int port;
  }

  record History {
    string date;
    long interval;
    array<long> `bytes`;
  }

  record CrossCert {
    string cert;
    int bit;
  }

  // server-descriptor 1.0 - same as relay but without  field 'router_signature'
  @aliases(["bridge_server"])
  record Bridge {
    string descriptor_type = "server-descriptor 1.0";
    union { null, Router } router;
    union { null, boolean } identity_ed25519;
    union { null, string } master_key_ed25519;
    union { null, Bandwidth } bandwidth;
    union { null, string } platform;
    union { null, string } published;
    union { null, string } fingerprint;
    union { null, boolean } hibernating;
    union { null, long } uptime;
    union { null, boolean } onion_key;
    union { null, boolean } onion_key_crosscert;
    union { null, boolean } ntor_onion_key;
    union { null, CrossCert } ntor_onion_key_crosscert;
    union { null, boolean } signing_key;
    union { null, array<string> } exit_policy;
    string ipv6_policy = "ipv6-policy reject 1-65535";
    union { null, string } ipv6_portlist;
    union { null, boolean } router_sig_ed25519;
    union { null, string } contact;
    union { null, array<string> } family;
    union { null, History } read_history;
    union { null, History } write_history;
    union { null, boolean } eventdns;
    union { null, boolean } caches_extra_info;
    union { null, string } extra_info_digest;
    union { null, string } extra_info_digest_sha256;
    union { null, array<int> } hidden_service_dir;
    union { null, array<int> } link_protocol_versions;
    union { null, array<int> } circuit_protocol_versions;
    union { null, boolean } allow_single_hop_exits;
    union { null, array<OrAddress> } or_address;
    union { null, string } router_digest;
    union { null, string } router_digest_sha256;
  }



}