@namespace("trans.encoders.torperf")
protocol torperf_descriptor {

  @aliases(["torperfResult"])
  record Torperf {
    string descriptor_type = "torperf 1.0";
    /** file creation date, in milliseconds, of the data source to this conversion */
    union { null, long } src_date;
    /** metrics-lib/TorperfResult: String getSource() */
    union { null, string } source;
    /** metrics-lib/TorperfResult: int getFileSize() */
    union { null, int } filesize;
    /** metrics-lib/TorperfResult: long getStartMillis() */
    union { null, long } start;
    /** metrics-lib/TorperfResult: long getSocketMillis() */
    union { null, long } socket;
    /** metrics-lib/TorperfResult: long getConnectMillis() */
    union { null, long } connect;
    /** metrics-lib/TorperfResult: long getNegotiateMillis() */
    union { null, long } negotiate;
    /** metrics-lib/TorperfResult: long getRequestMillis() */
    union { null, long } request;
    /** metrics-lib/TorperfResult: long getResponseMillis() */
    union { null, long } response;
    /** metrics-lib/TorperfResult: long getDataRequestMillis() */
    union { null, long } datarequest;
    /** metrics-lib/TorperfResult: long getDataResponseMillis() */
    union { null, long } dataresponse;
    /** metrics-lib/TorperfResult: long getDataCompleteMillis() */
    union { null, long } datacomplete;
    /** metrics-lib/TorperfResult: int getWriteBytes() */
    union { null, int } writebytes;
    /** metrics-lib/TorperfResult: int getReadBytes() */
    union { null, int } readbytes;
    /** metrics-lib/TorperfResult: Boolean didTimeout() */
    union { null, boolean } didtimeout;
    /** metrics-lib/TorperfResult: long SortedMap<Integer, Long> getDataPercentiles().get(10) */
    union { null, long } dataperc10;
    /** metrics-lib/TorperfResult: long SortedMap<Integer, Long> getDataPercentiles().get(20) */
    union { null, long } dataperc20;
    /** metrics-lib/TorperfResult: long SortedMap<Integer, Long> getDataPercentiles().get(30) */
    union { null, long } dataperc30;
    /** metrics-lib/TorperfResult: long SortedMap<Integer, Long> getDataPercentiles().get(40) */
    union { null, long } dataperc40;
    /** metrics-lib/TorperfResult: long SortedMap<Integer, Long> getDataPercentiles().get(50) */
    union { null, long } dataperc50;
    /** metrics-lib/TorperfResult: long SortedMap<Integer, Long> getDataPercentiles().get(60) */
    union { null, long } dataperc60;
    /** metrics-lib/TorperfResult: long SortedMap<Integer, Long> getDataPercentiles().get(70) */
    union { null, long } dataperc70;
    /** metrics-lib/TorperfResult: long SortedMap<Integer, Long> getDataPercentiles().get(80) */
    union { null, long } dataperc80;
    /** metrics-lib/TorperfResult: long SortedMap<Integer, Long> getDataPercentiles().get(90) */
    union { null, long } dataperc90;
    /** metrics-lib/TorperfResult: long getLaunchMillis()() */
    union { null, long } launch;
    /** metrics-lib/TorperfResult: long getUsedAtMillis() */
    union { null, long } used_at;
    /** metrics-lib/TorperfResult: List<String> getPath() */
    union { null, array<string> } path;
    /** metrics-lib/TorperfResult: List<Long> getBuildTimes() */
    union { null, array<long> } buildtimes;
    /** metrics-lib/TorperfResult: long getTimeout() */
    union { null, long } timeout;
    /** metrics-lib/TorperfResult: double getQuantile() */
    union { null, double } quantile;
    /** metrics-lib/TorperfResult: int getCircId() */
    union { null, int } circ_id;
    /** metrics-lib/TorperfResult: int getUsedBy() */
    union { null, int } used_by;
   }

}
